@page "/"

@using DatabaseLibrary
@using Schulmuseum.Models
@using System.Security.Cryptography;
@using System.Text;
@using Microsoft.Extensions.Configuration

@inject DataAccess Data
@inject IConfiguration Config

@* @attribute [Authorize(Roles = "Administrator,User")] // this site is only accessible for Users and admins*@
<LazyLoader Load="Load" Text="@_joke">
  <HeadTitle>Home</HeadTitle>
  @{
    string rPostLink = "/artikel/" + EncryptString(_randomPost!.Id.ToString());
  }
  <Hero Title="@_settingsDict["page-title"]" PostTitle="@_randomPost.Title" PostDesc="@_randomPost.Description" ImageUrl="@_randomPost.TitleImage" PostLink="@rPostLink"/>
  
  
  <h2>Die neusten Artikel</h2>
  <br/>
  <div class="posts">
    @if (_posts!.Count <= MaxBlogCount)
        {
          @foreach (var t in _posts)
          {
            if (t.Id != _randomPost.Id){
            string link = "/artikel/" + EncryptString(t.Id.ToString());
              <Post Category="@_subjects![t.CategoryId].Name" Title="@t.Title" ImageUrl="@t.TitleImage" CategoryId="@t.CategoryId" VisibleId="0" Link="@link"/>
            }
          }
        }
        else
        {
          @for (var i = 0; i < MaxBlogCount; i++)
          {
            if (_posts[i].Id != _randomPost.Id){
            string link = "/artikel/" + EncryptString(_posts[i].Id.ToString());
              <Post Category="@_subjects![_posts[i].CategoryId].Name" Title="@_posts[i].Title" ImageUrl="@_posts[i].TitleImage" CategoryId="@_posts[i].CategoryId" VisibleId="0" Link="@link"/>
            }
          }
        }
  </div>
</LazyLoader>
@code
{
  List<SettingsModel>? _settings;
  List<SubjectModel>? _subjects;
  List<BlogPost>? _posts;
  BlogPost? _randomPost;
  readonly IDictionary<string, string?> _settingsDict = new Dictionary<string, string?>();
      
  private const int MaxBlogCount = 6; // Max number of displayed blogs on title page
  readonly string _joke = JokeGenerator.GetShortJoke();
  public int Time = 10;
  
  public async Task Load(LazyLoader arg)
  {
    // Get all the subjects form the database
    _subjects = await Data.LoadData<SubjectModel, dynamic>("SELECT * FROM subjects", new { }, Config.GetConnectionString("main"));
    
    // Get all the settings form the database
    _settings = await Data.LoadData<SettingsModel, dynamic>("SELECT * FROM settings", new { }, Config.GetConnectionString("main"));
    
    // Put all the settings in a Dictionary for convenience
    foreach (var setting in _settings)
    {
      if (setting.Name != null) _settingsDict.Add(setting.Name, setting.Value);
    }
    
    // Get all the posts form the database
    _posts = await Data.LoadData<BlogPost, dynamic>("SELECT * FROM posts WHERE status = 1 or status = 5 ORDER BY id DESC ", new { }, Config.GetConnectionString("main"));
    // Get random post
    List<BlogPost>? temporary = await Data.LoadData<BlogPost, dynamic>("SELECT * FROM posts WHERE status = 1 or status = 5 ORDER BY RAND() LIMIT 1", new { }, Config.GetConnectionString("main"));
    _randomPost = temporary[0];
  }
  
  public string EncryptString(string plainText)
  {
    char padding = Convert.ToChar("=");
    byte[] toEncodeAsBytes = System.Text.Encoding.ASCII.GetBytes(plainText + "Ka0T91Gi$f");
    return System.Convert.ToBase64String(toEncodeAsBytes).TrimEnd(padding).Replace('+', '-').Replace('/', '_');
  }
}
