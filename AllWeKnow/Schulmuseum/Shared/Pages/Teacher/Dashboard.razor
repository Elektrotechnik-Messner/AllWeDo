@page "/teacher"
@attribute [Authorize(Roles = "admin,teacher")]

@using DatabaseLibrary
@using Schulmuseum.Models
@using Microsoft.Extensions.Configuration

@inject DataAccess Data
@inject IConfiguration Config

<HeadTitle>Teachertool</HeadTitle>

@if (_subjects == null || _posts == null)
{
  <PageTitle>Alle Artikel - LÃ¤dt</PageTitle>
  <Loader Joke="Noch zu implementieren..."></Loader>
} else
{
  <h3>Alle Artikel</h3>
  <div class="tags">
  <span class="tag@(_categoryFilter[0] ? " active" : "")" @onclick="() => UpdateFilter(0)">All</span>
  @foreach (var subject in _subjects)
  {
    <span class="tag@(_categoryFilter[(int)subject.Id!] ? " active" : "")" @onclick="() => UpdateFilter((int)subject.Id!)">@subject.Name</span>
  }
   </div>
  <h3>Artikel ohne Genehmigung</h3>
  <br>
    @if (_posts.Count <= MaxBlogCount)
    {
      @foreach (var t in _posts)
      {
        if (t.Status >= 0 && t.Status != 5 && t.Status != 1){
          string link = EncryptString(t.Id.ToString());
          <PostTeacherView Category="@_subjects[t.CategoryId].Name" Idp="@t.Id" Title="@t.Title" ImageUrl="@t.TitleImage" CategoryId="@t.CategoryId" VisibleId="@VisibleCategoryId" Link="@link" Status="@t.Status"/>
        }
      }
    }
    else
    {
      @for (var i = 0; i < MaxBlogCount; i++)
      {
        if (_posts[i].Status >= 0 && _posts[i].Status != 5 && _posts[i].Status != 1)
        {
          string link = EncryptString(_posts[i].Id.ToString());
          <PostTeacherView Category="@_subjects[_posts[i].CategoryId].Name" Idp="@_posts[i].Id" Title="@_posts[i].Title" ImageUrl="@_posts[i].TitleImage" CategoryId="@_posts[i].CategoryId" VisibleId="@VisibleCategoryId" Link="@link" Status="@_posts[i].Status"/>
        }
      }
    }
  <h3>Artikel mit Genehmigung</h3>
  <br>
    @if (_posts.Count <= MaxBlogCount)
    {
      @foreach (var t in _posts)
      {
        if (t.Status == 1 || t.Status == 5){
          string link = EncryptString(t.Id.ToString());
          <PostTeacherView Category="@_subjects[t.CategoryId].Name" Idp="@t.Id" Title="@t.Title" ImageUrl="@t.TitleImage" CategoryId="@t.CategoryId" VisibleId="@VisibleCategoryId" Link="@link" Status="@t.Status"/>
        }
      }
    }
    else
    {
      @for (var i = 0; i < MaxBlogCount; i++)
      {
        if (_posts[i].Status == 1 || _posts[i].Status == 5)
        {
          string link = EncryptString(_posts[i].Id.ToString());
          <PostTeacherView Category="@_subjects[_posts[i].CategoryId].Name" Idp="@_posts[i].Id" Title="@_posts[i].Title" ImageUrl="@_posts[i].TitleImage" CategoryId="@_posts[i].CategoryId" VisibleId="@VisibleCategoryId" Link="@link" Status="@_posts[i].Status"/>
        }
      }
    }
}

@code 
{
  List<SubjectModel>? _subjects;
  List<BlogPost>? _posts;
      
  private const int MaxBlogCount = 25; // Max number of displayed blogs on title page
  private readonly List<bool> _categoryFilter = new List<bool>();
  public int VisibleCategoryId = 0;

  protected override async Task OnInitializedAsync()
  {
  // Get all the settings form the database
    _subjects = await Data.LoadData<SubjectModel, dynamic>("SELECT * FROM subjects", new { }, Config.GetConnectionString("main"));
    _categoryFilter.Add(true);
    foreach (var subject in _subjects)
    {
      _categoryFilter.Add(false);
    }
  // Get all the posts form the database
    _posts = await Data.LoadData<BlogPost, dynamic>("SELECT * FROM posts ORDER BY id DESC", new { }, Config.GetConnectionString("main"));
  }

  public void UpdateFilter(int value)
  {
    for (int i = 0; i < _categoryFilter.Count; i++)
    {
      _categoryFilter[i] = false;
    }
    _categoryFilter[value] = true;
    VisibleCategoryId = value;
  }
  public string EncryptString(string plainText)
  {
    char padding = Convert.ToChar("=");
    byte[] toEncodeAsBytes = System.Text.Encoding.ASCII.GetBytes(plainText + "Ka0T91Gi$f");
    return System.Convert.ToBase64String(toEncodeAsBytes).TrimEnd(padding).Replace('+', '-').Replace('/', '_');
  }
}