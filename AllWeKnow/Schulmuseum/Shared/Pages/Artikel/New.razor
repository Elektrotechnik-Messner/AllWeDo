@page "/new"
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

@using DatabaseLibrary
@using Microsoft.Extensions.Configuration
@using Schulmuseum.Models
@using ZstdSharp.Unsafe
@inject DataAccess Data
@inject IConfiguration Config
@inject NavigationManager navMan

@attribute [Authorize(Roles = "admin,teacher,student")]


<input type="text" placeholder="Der Titel des Artikels" class="inp-l  m-b" @bind="_postTitle"/><br/>
<input type="text" placeholder="Eine Kurze Beschreibung des Artikels" class="m-b" @bind="_postDesc"/>

<div class="upload m-b">
    @((MarkupString)_previewImage)
    <label for="input">Titelbild hochladen</label>
</div>

<BlazoredTextEditor @ref="@_quillHtml" EditorCssStyle="min-height: 30vh;" Placeholder="Dein Artikel..." EditorCssClass="m-b">
    <ToolbarContent>
        <select class="ql-header">
            <option selected=""></option>
            <option value="1"></option>
            <option value="2"></option>
            <option value="3"></option>
        </select>
        <span class="ql-formats">
            <button class="ql-bold ql-btn"></button>
            <button class="ql-italic ql-btn" ></button>
            <button class="ql-underline ql-btn"></button>
            <button class="ql-strike ql-btn"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color ql-btn"></select>
            <select class="ql-background ql-btn"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-list ql-btn" value="ordered"></button>
            <button class="ql-list ql-btn" value="bullet"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-link ql-btn"></button>
            <button class="ql-video ql-btn"></button>
            <button class="ql-image ql-btn"></button>
        </span>
    </ToolbarContent>
    <EditorContent>
    </EditorContent>
</BlazoredTextEditor>

<InputFile OnChange="@LoadFiles" accept=".png,.jpg,.jpeg,.gif,.svg" id='input'/>
<br/>
<button @onclick="Submit">Artikel speichern</button>

<AuthorizeView>
    <Authorized>
        @{
            _creatorId = int.Parse(context.User.Identity!.AuthenticationType!);
        }
    </Authorized>
</AuthorizeView>

@code {
    string? _postTitle = "";
    string? _postDesc = "";
    int _creatorId;
    private string? _postContent;

    string _previewImage = "<div class='image-placeholder'></div>";
    
    BlazoredTextEditor _quillHtml = null!;

    private async void GetHtml()
    {
        _postContent = await this._quillHtml.GetHTML();
        StateHasChanged();
    }

    private const long MaxFileSize = 1024 * 1024 * 10;
    private string? _titleImageName;

    private async Task LoadFiles (InputFileChangeEventArgs e)
    {
        var file = e.File;
        Console.WriteLine(file.Name);
        try
        {
            _titleImageName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name.ToLower())
                );
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "images", _titleImageName);
            Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "images"));
            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(MaxFileSize).CopyToAsync(fs);
            _previewImage = "<img src='bucket/images/" + _titleImageName + "'/>";

        }
        catch (Exception exception)
        {
            await Js.InvokeVoidAsync("alert", $"Ein unbekannter Fehler ist aufgetreten.");
            Console.WriteLine(exception);
            throw;
        }
    }
    
    private async Task Submit()
    {
        _postContent = await this._quillHtml.GetHTML();
        StateHasChanged();
        string imagepath = "bucket/images/" + _titleImageName;
        if (_postDesc is not null && _postContent is not "" && _postContent is not null && _titleImageName is not null && _postTitle is not "")
        {
            string sql = "insert into posts (Qualified, CategoryId, CreatorId, Title, Description, TitleImage, Username, Date, Content) values (@Qualified, @CategoryId, @CreatorId, @Title, @Description, @TitleImage, @Username, @Date, @Content);";
            await Data.SaveData(sql, new { Qualified = 0, CategoryId = 1, CreatorId = _creatorId, Title = _postTitle, Description = _postDesc, TitleImage = imagepath, Username = "Test", Date = DateTime.Now, Content = _postContent}, Config.GetConnectionString("main"));
            await Js.InvokeVoidAsync("alert", "Erfolgreich gespeichert");
            navMan.NavigateTo("/meine-artikel", true);
        }
        else
        {
            await Js.InvokeVoidAsync("alert", "Alle Felder müssen ausgefüllt sein!");
        }
    }
}