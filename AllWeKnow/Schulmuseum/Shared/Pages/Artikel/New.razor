@page "/new"
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

@attribute [Authorize(Roles = "admin,teacher,student")]

@if (_titleImageName != null){
    <img src="/bucket/images/@_titleImageName" alt="Title Image"/>
}
<InputFile OnChange="@LoadFiles" accept=".png,.jpg,.jpeg,.gif"/>

<BlazoredTextEditor @ref="@_quillHtml" EditorCssStyle="min-height: 30vh;" Placeholder="Dein Artikel...">
    <ToolbarContent>
        <select class="ql-header">
            <option selected=""></option>
            <option value="1"></option>
            <option value="2"></option>
            <option value="3"></option>
        </select>
        <span class="ql-formats">
            <button class="ql-bold ql-btn"></button>
            <button class="ql-italic ql-btn" ></button>
            <button class="ql-underline ql-btn"></button>
            <button class="ql-strike ql-btn"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color ql-btn"></select>
            <select class="ql-background ql-btn"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-list ql-btn" value="ordered"></button>
            <button class="ql-list ql-btn" value="bullet"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-link ql-btn"></button>
            <button class="ql-video ql-btn"></button>
            <button class="ql-image ql-btn"></button>
        </span>
    </ToolbarContent>
    <EditorContent>
        
    </EditorContent>
</BlazoredTextEditor>
<br />
<button @onclick="GetHtml">Get HTML</button>

<div>
    <br />
    @if(_html != null){
        @((MarkupString)_html)
        @_html
    }
 
</div>
<br />

@code {

    BlazoredTextEditor _quillHtml = null!;
    private string? _html;

    private async void GetHtml()
    {
        _html = await this._quillHtml.GetHTML();
        StateHasChanged();
        
    }

    private const long MaxFileSize = 1024 * 1024 * 10;
    private string _titleImageName = null!;

    private async Task LoadFiles (InputFileChangeEventArgs e)
    {
        var file = e.File;
        
        Console.WriteLine(file.Name);


        try
        {
            _titleImageName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name.ToLower())
                );

            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "images", _titleImageName);

            Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "images"));

            await using FileStream fs = new(path, FileMode.Create);

            await file.OpenReadStream(MaxFileSize).CopyToAsync(fs);
            
        }
        catch (Exception exception)
        {
            await Js.InvokeVoidAsync("alert", $"Ein unbekannter Fehler ist aufgetreten.");
            Console.WriteLine(exception);
            throw;
        }
        
        
    }
    

}