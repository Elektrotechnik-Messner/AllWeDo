@page "/edit/{PostId}"
@attribute [Authorize(Roles = "admin,teacher,student")]

@if (post == null)
{
    <Loader Joke="@JokeGenerator.GetShortJoke()"/>
}
else
{

}
    <input type="text" value="@post[0].Title" placeholder="Der Titel des Artikels" class="inp-l  m-b" @bind="_postTitle"/><br/>
    <input type="text" value="@post[0].Description" placeholder="Eine Kurze Beschreibung des Artikels" class="m-b" @bind="_postDesc"/>

    <div class="upload m-b">
    @((MarkupString)_previewImage)
    <label for="input">Titelbild hochladen</label>
    </div>


<TextEditor Toolbar="new Toolbar { ShowFullToolbar = true }" @ref="@_quillHtml"
            Placeholder="Dein Epischer Artikel">
    <EditorContent>
        @post[0].Content
    </EditorContent>
</TextEditor>


    <InputFile OnChange="@LoadFiles" accept=".png,.jpg,.jpeg,.gif,.svg" id='input'/>

    <br/>
    <button @onclick="Submit">Artikel speichern</button>

    <AuthorizeView>
    <Authorized>
        @{
            _creatorId = int.Parse(context.User.Identity!.AuthenticationType!);
        }
    </Authorized>
    </AuthorizeView>

}
@code {
    
    [Parameter]
    public string? PostId { get; set; }
    
    string? _postTitle = "";
    string? _postDesc = "";
    int _creatorId;
    private string? _postContent;
    List<BlogPost>? post;
    string _previewImage = "<div class='image-placeholder'></div>";


    protected override async Task OnInitializedAsync()
    {
    // Get all the content of the blog by id from the database
        post = await Data.LoadData<BlogPost, dynamic>("SELECT * FROM posts WHERE id = " + PostId, new { }, Config.GetConnectionString("main"));
        _previewImage = "<img src='"+ post[0].TitleImage +"'></img>";
    }
    

    
    
    TextEditor? _quillHtml;
        
    private const long MaxFileSize = 1024 * 1024 * 10;
    private string? _titleImageName;

    private async Task LoadFiles (InputFileChangeEventArgs e)
    {
        var file = e.File;
        Console.WriteLine(file.Name);
        try
        {
            _titleImageName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name.ToLower())
                );
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "images", _titleImageName);
            Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "images"));
            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(MaxFileSize).CopyToAsync(fs);
            _previewImage = "<img src='bucket/images/" + _titleImageName + "'/>";

        }
        catch (Exception exception)
        {
            await Js.InvokeVoidAsync("alert", $"Ein unbekannter Fehler ist aufgetreten.");
            Console.WriteLine(exception);
            throw;
        }
    }
    
    private async Task Submit()
    {
        string imagepath;
        _postContent = await this._quillHtml!.GetHTML()!;
        StateHasChanged();

        if (_titleImageName == "")
        {
            // use old image
            imagepath = "bucket/images/" + "Imagename.png";
        }
        else
        {   
            imagepath = "bucket/images/" + _titleImageName;
        }
        
        if (_postDesc is not null && _postContent is not "" && _postContent is not null && _titleImageName is not null && _postTitle is not "")
        {
            // to database
        }
        else
        {
            await Js.InvokeVoidAsync("alert", "Alle Felder müssen ausgefüllt sein!");
        }
    }
}

    
