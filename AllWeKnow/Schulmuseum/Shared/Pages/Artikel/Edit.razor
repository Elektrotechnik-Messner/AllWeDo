@page "/edit/{PostId}"
@using System.Text
@attribute [Authorize(Roles = "admin,teacher,student")]

@*
@if (Loaded is not true)
{
    <Loader Joke="@JokeGenerator.GetShortJoke()"/>
    <HeadTitle>L채dt</HeadTitle>
}
else
{
    <HeadTitle>Post "@_post![0].Title" bearbeiten</HeadTitle>
    <input type="text" placeholder="Der Titel des Artikels" class="inp-l  m-b" @bind="_postTitle"/><br/>
    <input type="text" placeholder="Eine Kurze Beschreibung des Artikels" class="m-b" @bind="_postDesc"/>

    <div class="upload m-b">
    @((MarkupString)_previewImage)
    <label for="input">Titelbild hochladen</label>
    </div>


<TextEditor Toolbar="new Toolbar { ShowFullToolbar = true }" @ref="@_quillHtml"
            Placeholder="Dein Epischer Artikel">
    <EditorContent>
        @ToRawHtml(_post?[0].Content!)
    </EditorContent>
</TextEditor>


    <InputFile OnChange="@LoadFiles" accept=".png,.jpg,.jpeg,.gif,.svg" id='input'/>

    <br/>
    <button @onclick="Submit">Artikel speichern</button>

    <AuthorizeView>
    <Authorized>
        @{
            _creatorId = int.Parse(context.User.Identity!.AuthenticationType!);
        }
    </Authorized>
    </AuthorizeView>
}
*@


<LazyLoader Load="Load" Text="Wird geladen">
    
    @if (Loaded is not true)
    {
        <Loader Joke="@JokeGenerator.GetShortJoke()"/>
        <HeadTitle>L채dt</HeadTitle>
    }
    else
    {
        <HeadTitle>Post "@_post![0].Title" bearbeiten</HeadTitle>
        <input type="text" placeholder="Der Titel des Artikels" class="inp-l  m-b" @bind="_postTitle"/><br/>
        <input type="text" placeholder="Eine Kurze Beschreibung des Artikels" class="m-b" @bind="_postDesc"/>
    
        <div class="upload m-b">
        @((MarkupString)_previewImage)
        <label for="input">Titelbild hochladen</label>
        </div>
    
    
    <TextEditor Toolbar="new Toolbar { ShowFullToolbar = true }" @ref="@_quillHtml"
                Placeholder="Dein Epischer Artikel">
        <EditorContent>
            @ToRawHtml(_post?[0].Content!)
        </EditorContent>
    </TextEditor>
    
    
        <InputFile OnChange="@LoadFiles" accept=".png,.jpg,.jpeg,.gif,.svg" id='input'/>
    
        <br/>
        <button @onclick="Submit">Artikel speichern</button>
    
        <AuthorizeView>
        <Authorized>
            @{
                _creatorId = int.Parse(context.User.Identity!.AuthenticationType!);
            }
        </Authorized>
        </AuthorizeView>
    }
    
</LazyLoader>

@code {
    
    [Parameter]
    public string? PostId { get; set; }

    public bool Loaded = false;

    string? _postTitle = "";
    string? _postDesc = "";
    int _creatorId;
    private string? _postContent;
    List<BlogPost>? _post;
    string _previewImage = "<div class='image-placeholder'></div>";

    public string Newimagepath = "";
    
    private async Task Load(LazyLoader arg)
    {
    // Get all the content of the blog by id from the database
        _post = await Data.LoadData<BlogPost, dynamic>("SELECT * FROM posts WHERE id = " + DecryptString(PostId!), new { }, Config.GetConnectionString("main"));
        _previewImage = "<img src='"+ _post[0].TitleImage +"'></img>";
        _postTitle = _post[0].Title;
        _postDesc = _post[0].Description;
        
        Loaded = true;
    }
    
    TextEditor? _quillHtml;
        
    private const long MaxFileSize = 1024 * 1024 * 10;
    private string _titleImageName = "";

    private async Task LoadFiles (InputFileChangeEventArgs e)
    {
        var file = e.File;
        try
        {
            _titleImageName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name.ToLower())
                );
            string path = Path.Combine(Config.GetValue<string>("FileStorage")!, "images", _titleImageName);
            Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "images"));
            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(MaxFileSize).CopyToAsync(fs);
            _previewImage = "<img src='bucket/images/" + _titleImageName + "'/>";

        }
        catch (Exception exception)
        {
            await Js.InvokeVoidAsync("alert", $"Ein unbekannter Fehler ist aufgetreten.");
            Console.WriteLine(exception);
            throw;
        }
    }
    
    private async Task Submit()
    {
        
        _postContent = await this._quillHtml!.GetHTML()!;
        StateHasChanged();

        if (_titleImageName == "")
        {
            // use old image
            Newimagepath = _post![0].TitleImage!;
        }
        else
        {   
            // use the new one
            Newimagepath = "bucket/images/" + _titleImageName;
        }
        
        if (_postDesc is not null && _postContent is not "" && _postContent is not null && _titleImageName is not null && _postTitle is not "")
        {
            string sql = "update posts set Title = @Title, Description = @Description, TitleImage = @TitleImage, Content = @Content where id = @ID";
            if (_post != null) await Data.SaveData(sql, new { Title = _postTitle, Description = _postDesc, TitleImage = Newimagepath, Content = _postContent, @ID = _post[0].Id }, Config.GetConnectionString("main"));
            NavManager.NavigateTo("/meine-artikel", true);
        }
        else
        {
            await Js.InvokeVoidAsync("alert", "Alle Felder m체ssen ausgef체llt sein!");
        }
    }
    
    public static MarkupString ToRawHtml(string html)
    {
        return (MarkupString)html;
    }

    public string DecryptString(string cipherText)
    {
        string incoming = cipherText.Replace('_', '/').Replace('-', '+');
        switch (cipherText.Length % 4)
        {
            case 2:
                incoming += "==";
                break;
            case 3:
                incoming += "=";
                break;
        }
        byte[] bytes = Convert.FromBase64String(incoming);
        return Encoding.ASCII.GetString(bytes).Replace("Ka0T91Gi$f", "");
    }

}

    
