@using System.Security.Cryptography;
@using System.Text;

@if (string.IsNullOrEmpty(PostId))
{
    <NotFound/>
}
else
{
    <LazyLoader Load="Load" Text="Wird geladen...">
        <div class="postview">
            <div class="title-div">
                <div class="text">
                    <img
                        src="@_content![0].TitleImage"/>
                    <h1 class="title">
                        @_content![0].Title
                    </h1>
                    <p>
                        @_content![0].Description
                    </p>
                </div>
            </div>
            <hr/>
            <div class="content">
                @{
                    var content = _content![0].Content;
                    @if (content != null)
                    {
                        @ToRawHtml(content)
                    }
                }
            </div>
        </div>

    </LazyLoader>
}

@code {
    
    [Parameter]
    public string? PostId { get; set; }

    List<BlogPost>? _content;
    

    private async Task Load(LazyLoader arg)
    {
        string id = "";
        if (PostId != null)
        {
            id = DecryptString(PostId);
        }
        _content = await Data.LoadData<BlogPost, dynamic>("SELECT * FROM posts WHERE id = " + id, new { }, Config.GetConnectionString("main"));
    }

    public static MarkupString ToRawHtml(string html)
    {
        return (MarkupString)html;
    }

    public string DecryptString(string cipherText)
    {
        string incoming = cipherText.Replace('_', '/').Replace('-', '+');
        switch(cipherText.Length % 4) {
            case 2: incoming += "=="; break;
            case 3: incoming += "="; break;
        }
        byte[] bytes = Convert.FromBase64String(incoming);
        return Encoding.ASCII.GetString(bytes).Replace("Ka0T91Gi$f", "");
    }
}