@inherits LayoutComponentBase

@using DatabaseLibrary
@using Schulmuseum.Models
@using Microsoft.Extensions.Configuration

@inject DataAccess Data
@inject IConfiguration Config

@inject NavigationManager NavigationManager


@if (_settings == null)
{
  <NavMenu Title="Lädt..."/>
  <PageTitle>Lädt...</PageTitle>
}
else
{
  <PageTitle>@_settingsDict["app-name"]</PageTitle>
  <NavMenu Title="@_settingsDict["app-name"]"/>
  
  <HeadContent>
      <meta property='og:title' content='@_settingsDict["app-name"] - @_settingsDict["page-title"]'/>
       <meta name="description" content="Startseite - @_settingsDict["app-name"]">
  </HeadContent>
}




<div class="container">
    @Body
</div>

<NavBottom/>

@code {
  
  private string currentUrl = "";

  protected override void OnInitialized()
  {
    currentUrl = NavigationManager.Uri;
  }
  
  List<SettingsModel>? _settings;
  readonly IDictionary<string, string?> _settingsDict = new Dictionary<string, string?>();
   
  protected override async Task OnInitializedAsync()
  {
  // Get all the settings form the database
    const string sqlS = "select * from settings";
    _settings = await Data.LoadData<SettingsModel, dynamic>(sqlS, new { }, Config.GetConnectionString("main"));
  // Put all the settings in a Dictionary for convenience
    foreach (var setting in _settings)
    {
      if (setting.Name != null) _settingsDict.Add(setting.Name, setting.Value);
    }
  }
}
