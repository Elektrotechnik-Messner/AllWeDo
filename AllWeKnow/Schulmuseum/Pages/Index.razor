@page "/"

@using DatabaseLibrary
@using Schulmuseum.Models
@using Microsoft.Extensions.Configuration

@inject DataAccess Data
@inject IConfiguration Config

@* @attribute [Authorize(Roles = "Administrator,User")] // this site is only accessible for Users and admins*@

@if (_settings == null || _subjects == null || _posts == null || Time > 0 || _randomPost == null)
{
  <PageTitle>Home - Lädt</PageTitle>
  <Loader Joke="@_joke"></Loader>
}
else
{
  <HeadTitle>Home</HeadTitle>
  // @_randomPost.Title instead of @_randomPost.Id.ToString() that is used for testing
  <Hero Title="@_settingsDict["page-title"]" PostTitle="@_randomPost.Id.ToString()" PostDesc="@_randomPost.Description" ImageUrl="@_randomPost.TitleImage"/>
  
  
  
  
  <h2>Die neusten Artikel</h2>
  <br/>
  <div class="posts">
    @if (_posts.Count <= MaxBlogCount)
        {
          @foreach (var t in _posts)
          {
            string link = "/viewpost/" + @t.Id;
            <Post Category="@_subjects[t.CategoryId].Name" Title="@t.Title" ImageUrl="@t.TitleImage" CategoryId="@t.CategoryId" VisibleId="0" Link="@link"/>
          }
        }
        else
        {
          @for (var i = 0; i < MaxBlogCount; i++)
          {
            string link = "/viewpost/" + @_posts[i].Id;
            <Post Category="@_subjects[_posts[i].CategoryId].Name" Title="@_posts[i].Title" ImageUrl="@_posts[i].TitleImage" CategoryId="@_posts[i].CategoryId" VisibleId="0" Link="@link"/>
          }
        }
  </div>
    
@code
{
  
  
  List<SettingsModel>? _settings;
  List<SubjectModel>? _subjects;
  List<BlogPost>? _posts;
  BlogPost? _randomPost;
  readonly IDictionary<string, string?> _settingsDict = new Dictionary<string, string?>();
      
  private const int MaxBlogCount = 6; // Max number of displayed blogs on title page
  readonly string _joke = @JokeGenerator.GetShortJoke();
  public int Time = 10;

  public async void StartTimerAsync()
  {
    while (Time > 0)
    {
      Time--;
      StateHasChanged();
      await Task.Delay(100);
    }
  }
  protected override void OnInitialized()
    => StartTimerAsync();

  protected override async Task OnInitializedAsync()
  {
  // Get all the subjects form the database
    _subjects = await Data.LoadData<SubjectModel, dynamic>("SELECT * FROM subjects", new { }, Config.GetConnectionString("main"));
  // Get all the settings form the database
    _settings = await Data.LoadData<SettingsModel, dynamic>("SELECT * FROM settings", new { }, Config.GetConnectionString("main"));
  // Put all the settings in a Dictionary for convenience
    foreach (var setting in _settings)
    {
      if (setting.Name != null) _settingsDict.Add(setting.Name, setting.Value);
    }
  // Get all the posts form the database
    _posts = await Data.LoadData<BlogPost, dynamic>("SELECT * FROM posts ORDER BY id DESC", new { }, Config.GetConnectionString("main"));
  // Get random post
    List<BlogPost>? temporary = await Data.LoadData<BlogPost, dynamic>("SELECT DISTINCT * FROM posts ORDER BY RAND() LIMIT 1", new { }, Config.GetConnectionString("main"));
    _randomPost = temporary[0];
  }
  }
}